{"version":3,"sources":["components/Login/Login.jsx","components/AddTaskBar/AddTaskBar.jsx","images/icon-cross.svg","images/icon-check.svg","components/Task/Task.jsx","components/Tasklist/Tasklist.jsx","components/Button/Button.jsx","components/FilterBar/FilterBar.jsx","components/Overview/Overview.jsx","images/icon-moon.svg","images/icon-sun.svg","services/api.service.js","App.js","reportWebVitals.js","index.js"],"names":["usernameIsValid","str","match","length","passwordIsValid","password","Login","msg","onLogin","onRegister","errorMsg","loading","props","useState","username","setUsername","setPassword","error","setError","checkForErrors","useEffect","id","className","htmlFor","disabled","type","placeholder","value","onChange","e","newUsername","target","newPassword","onClick","defaultProps","undefined","AddTaskBar","onAddTask","description","setDescription","displaySaveBtn","name","enteredDescription","onKeyDown","key","Task","checked","task","onCompleteTask","onDeleteTask","onSaveTask","setValue","isUpdating","setIsUpdating","isDeleting","setIsDeleting","completed","tabIndex","src","checkIcon","alt","saveBtn","_id","event","stopPropagation","crossIcon","Tasklist","isLoading","tasks","events","map","Button","active","size","label","join","FilterBar","activeFilter","onSetFilter","Overview","tasksLeft","onClearCompleted","filter","api","require","default","create","baseURL","setAuthHeader","token","localStorage","getItem","defaults","headers","common","register","email","a","user","split","age","post","createdUser","data","Error","response","login","loggedInUser","logout","getTasks","get","addTask","createdTasks","updateTask","patch","put","updatedTask","deleteTask","delete","deleted","App","darkMode","state","setTasks","loadingLogin","setLoadgingLogin","loggedIn","setLoggedIn","loadTasks","setLoadTasks","isAddingTask","setIsAddingTask","setFilter","displayed","setDisplayed","ongoingAction","setOngoingAction","loginError","setLoginError","tasksByFilter","newDisplayed","slice","t","fetchData","then","res","sunIconPath","moonIconPath","removeItem","newTasks","catch","err","console","log","updateCompleteState","indexOfUpdatedTask","findIndex","find","newFilter","unclearedTasks","clearedTasks","clearPromises","Promise","all","setItem","message","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","jsx","global","document","getElementById"],"mappings":"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","file":"static/js/main.00dd6d5c.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./login.css\";\n\nfunction usernameIsValid(str) {\n  var regex = /^[A-Za-z]+$/;\n  if (str.match(regex) && str.length >= 3) {\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction passwordIsValid(password) {\n  return password.length >= 7 ? true : false;\n}\n\nfunction showErrorMsg(msg) {\n  if (!msg || msg === \"\") return null;\n\n  return (\n    <div className=\"error\">\n      <p className=\"error-msg\">{msg}</p>\n    </div>\n  );\n}\n\nexport const Login = ({ onLogin, onRegister, errorMsg, loading, ...props }) => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    setError(errorMsg);\n  }, [errorMsg]);\n\n  function checkForErrors(username, password) {\n    setError(\"\");\n\n    if (!usernameIsValid(username))\n      setError(\n        \"The name must contain only alphabetical letters and must have a minumum length of 3 characters.\"\n      );\n\n    if (!passwordIsValid(password))\n      setError(\"The password must have a minimum length of 7 characters.\");\n\n    if (!usernameIsValid(username) && !passwordIsValid(password)) {\n      setError(\n        \"The name must contain only alphabetical letters, must have a minumum length of 3 characters and the password must have a minimum length of 7 characters.\"\n      );\n    }\n  }\n\n  return (\n    <div id=\"login\" {...props}>\n      <div className=\"login-card\">\n        <h1 className=\"text--title\">TODO</h1>\n        <label htmlFor=\"login-name\" className=\"login-input\">\n          Username\n          <input\n            disabled={loading}\n            type=\"text\"\n            id=\"login-name\"\n            placeholder=\"Username\"\n            value={username}\n            onChange={(e) => {\n              const newUsername = e.target.value;\n              setUsername(newUsername);\n            }}\n          />\n        </label>\n        <label htmlFor=\"login-password\" className=\"login-input\">\n          Password\n          <input\n            disabled={loading}\n            type=\"password\"\n            id=\"login-password\"\n            placeholder=\"*******\"\n            value={password}\n            onChange={(e) => {\n              const newPassword = e.target.value;\n              setPassword(newPassword);\n            }}\n          />\n        </label>\n\n        <button\n          disabled={loading}\n          className={`login-btn ${loading ? \"loading\" : \"\"}`}\n          onClick={() => {\n            checkForErrors(username, password);\n\n            if (usernameIsValid(username) && passwordIsValid(password)) {\n              onLogin(`${username}.testing@testing.com`, password);\n            }\n          }}\n        >\n          Login\n        </button>\n\n        <button\n          disabled={loading}\n          className={`register-btn ${loading ? \"loading\" : \"\"}`}\n          onClick={() => {\n            checkForErrors(username, password);\n\n            if (usernameIsValid(username) && passwordIsValid(password)) {\n              onRegister(`${username}.testing@testing.com`, password);\n            }\n          }}\n        >\n          Register\n        </button>\n\n        {showErrorMsg(error)}\n      </div>\n    </div>\n  );\n};\n\nLogin.propTypes = {\n  // Handler when username is valid and the password is provided and wants to login\n  onLogin: PropTypes.func,\n  // Handler when username is valid and the password is provided and wants to register\n  onRegister: PropTypes.func,\n  // error msg to dispay\n  errorMsg: PropTypes.string,\n  // Loader to Disable inputs and button\n  loading: PropTypes.bool,\n};\n\nLogin.defaultProps = {\n  onLogin: undefined,\n  onRegister: undefined,\n  loading: false,\n  errorMsg: \"\",\n};\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./addTaskBar.css\";\n\nexport const AddTaskBar = ({ disabled, onAddTask, ...props }) => {\n  const [description, setDescription] = useState(\"\");\n\n  const displaySaveBtn =\n    description !== \"\" ? (\n      <button\n        disabled={disabled}\n        className=\"addbar-adtbtn\"\n        onClick={() => onAddTask(description)}\n      >\n        add\n      </button>\n    ) : null;\n\n  return (\n    <div className=\"addbar\" {...props}>\n      <div className=\"circle\"></div>\n\n      <input\n        disabled={disabled}\n        type=\"text\"\n        id=\"addTask\"\n        className=\"addbar-task\"\n        placeholder=\"Create a new todo..\"\n        name=\"task\"\n        value={description}\n        onChange={(e) => {\n          const enteredDescription = e.target.value;\n          setDescription(enteredDescription);\n        }}\n        onKeyDown={(e) => {\n          if (e.key === \"Enter\" && description !== \"\") {\n            onAddTask(description);\n          }\n        }}\n      />\n\n      {displaySaveBtn}\n    </div>\n  );\n};\n\nAddTaskBar.propTypes = {\n  // Handler if a task is entered and commited via the save btn or hitting enter\n  onAddTask: PropTypes.func,\n  // loader\n  disabled: PropTypes.bool,\n};\n\nAddTaskBar.defaultProps = {\n  onAddTask: undefined,\n  disabled: false,\n};\n","export default __webpack_public_path__ + \"static/media/icon-cross.6ee81d30.svg\";","export default __webpack_public_path__ + \"static/media/icon-check.a8fb15d0.svg\";","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./task.css\";\nimport crossIcon from \"../../images/icon-cross.svg\";\nimport checkIcon from \"../../images/icon-check.svg\";\n\nexport const Task = ({\n  task,\n  disabled,\n  onCompleteTask,\n  onDeleteTask,\n  onSaveTask,\n  ...props\n}) => {\n  const [value, setValue] = useState(\"\");\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  useEffect(() => {\n    setValue(task.description);\n    setIsUpdating(false);\n  }, [task]);\n\n  let checked;\n  if (task.completed) {\n    checked = (\n      <img\n        tabIndex=\"1\"\n        src={checkIcon}\n        className=\"check--checked\"\n        alt=\"Check a task as complete.\"\n      />\n    );\n  }\n\n  const saveBtn = (\n    <button\n      disabled={disabled}\n      className=\"save-btn\"\n      onClick={() => {\n        setIsUpdating(true);\n        onSaveTask(task._id, value);\n      }}\n    >\n      save\n    </button>\n  );\n\n  return (\n    <div className={`task ${isDeleting || isUpdating ? \"delete-glow\" : \"\"}`}>\n      <button\n        disabled={disabled}\n        className={`checkbox ${task.completed ? \"checkbox-bg\" : \"\"} ${\n          task.completed ? \"\" : \"check--unchecked\"\n        }`}\n        onClick={() => {\n          setIsUpdating(true);\n          onCompleteTask(task._id, !task.completed);\n        }}\n      >\n        {checked}\n      </button>\n\n      <input\n        disabled={disabled}\n        type=\"text\"\n        id={`description-${task._id}`}\n        className={`description ${task.completed ? \"text--checked\" : \"\"}`}\n        name=\"description\"\n        value={value}\n        onChange={(e) => {\n          setValue(e.target.value);\n        }}\n        onKeyDown={(e) => {\n          if (e.key === \"Enter\" && e.target.value !== \"\") {\n            setIsUpdating(true);\n            onSaveTask(task._id, value);\n          }\n        }}\n      />\n\n      {task.description !== value ? saveBtn : null}\n\n      <div onClick={(event) => event.stopPropagation()}>\n        <button\n          disabled={disabled}\n          className=\"delete\"\n          onClick={() => {\n            setIsDeleting(true);\n            onDeleteTask(task._id);\n          }}\n        >\n          <img src={crossIcon} className=\"delete-icon\" alt=\"Delete task.\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nTask.propTypes = {\n  /** Composition of the task */\n  task: PropTypes.shape({\n    // Id of the task\n    _id: PropTypes.string.isRequired,\n\n    // description of the task or the actual task\n    description: PropTypes.string.isRequired,\n\n    // State of the task\n    completed: PropTypes.bool,\n  }),\n\n  /**  disable inputs and buttons   */\n  disabled: PropTypes.bool,\n\n  /**  Optional click handler   */\n  onClick: PropTypes.func,\n\n  /**  Handler for clicking the complete checkbox */\n  onCompleteTask: PropTypes.func,\n\n  /**  Handler for clicking the Cross icon */\n  onDeleteTask: PropTypes.func,\n\n  /**  Handler when the input is changed */\n  onSaveTask: PropTypes.func,\n};\n\nTask.defaultProps = {\n  disabled: undefined,\n  onClick: undefined,\n  onCompleteTask: undefined,\n  onDeleteTask: undefined,\n  onSaveTask: undefined,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./tasklist.css\";\n\nimport { Task } from \"../Task/Task\";\n\nexport const Tasklist = ({\n  tasks,\n  loading,\n  disabled,\n  onCompleteTask,\n  onDeleteTask,\n  onSaveTask,\n  ...props\n}) => {\n  const events = { onCompleteTask, onDeleteTask, onSaveTask };\n\n  const display = function (isLoading) {\n    if (isLoading) {\n      return (\n        <div className=\"loader\">\n          <div className=\"loader-item\"></div>\n          <div className=\"loader-item\"></div>\n          <div className=\"loader-item\"></div>\n        </div>\n      );\n    } else {\n      if (tasks.length > 0) {\n        return tasks.map((task) => (\n          <Task\n            disabled={disabled}\n            className=\"task\"\n            key={`task-${task._id}`}\n            task={task}\n            {...events}\n          />\n        ));\n      } else {\n        return <div className=\"no-tasks\">No Tasks to display 😢</div>;\n      }\n    }\n  };\n\n  return <div className=\"Tasklist\">{display(loading)}</div>;\n};\n\nTasklist.propTypes = {\n  /** Array of Tasks */\n  /**  Handler for clicking the complete checkbox */\n  tasks: PropTypes.array,\n\n  /**  Handler for clicking the complete checkbox */\n  onCompleteTask: PropTypes.func,\n\n  /**  Handler for clicking the Cross icon */\n  onDeleteTask: PropTypes.func,\n\n  /**  Handler when the input is changed */\n  onSaveTask: PropTypes.func,\n};\n\nTasklist.defaultProps = {\n  loading: true,\n  onCompleteTask: undefined,\n  onDeleteTask: undefined,\n  onSaveTask: undefined,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./button.css\";\n\nexport const Button = ({ active, size, label, loading, ...props }) => {\n  return (\n    <button\n      {...props}\n      type=\"button\"\n      disabled={loading}\n      className={[\n        \"btn\",\n        `${active ? \"btn--active\" : \"\"}`,\n        `btn--${size}`,\n        `${loading ? \"btn--loading\" : \"\"}`,\n      ].join(\" \")}\n      {...props}\n    >\n      {label}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  /**\n   * In which variant should the button rendered primary, secondary or text\n   */\n  active: PropTypes.bool,\n  /**\n   * How large should the button be?\n   */\n  size: PropTypes.oneOf([\"small\", \"normal\"]),\n  /**\n   * Button contents\n   */\n  label: PropTypes.string.isRequired,\n  /**\n   * Button will be deactivated while loading\n   */\n  loading: PropTypes.bool,\n  /**\n   * Optional click handler\n   */\n  onClick: PropTypes.func,\n};\n\nButton.defaultProps = {\n  active: false,\n  loading: false,\n  size: \"normal\",\n  onClick: undefined,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./filterBar.css\";\nimport { Button } from \"../Button/Button\";\n\nexport const FilterBar = ({ activeFilter, onSetFilter, ...props }) => {\n  return (\n    <div {...props} className=\"filter\">\n      <Button\n        label=\"All\"\n        active={activeFilter === \"all\"}\n        onClick={() => onSetFilter(\"all\")}\n      />\n      <Button\n        label=\"Active\"\n        active={activeFilter === \"active\"}\n        onClick={() => onSetFilter(\"active\")}\n      />\n      <Button\n        label=\"Completed\"\n        active={activeFilter === \"completed\"}\n        onClick={() => onSetFilter(\"completed\")}\n      />\n    </div>\n  );\n};\n\nFilterBar.propTypes = {\n  /**\n   * Which filter is set active none - all - active - completed\n   */\n  activeFilter: PropTypes.oneOf([\"none\", \"all\", \"active\", \"completed\"]),\n  /**\n   * Optional click handler\n   */\n  onSetFilter: PropTypes.func,\n};\n\nFilterBar.defaultProps = {\n  activeFilter: \"none\",\n  onSetFilter: undefined,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./overview.css\";\nimport { Button } from \"../Button/Button\";\nimport { FilterBar } from \"../FilterBar/FilterBar\";\n\nexport const Overview = ({\n  tasksLeft,\n  activeFilter,\n  onSetFilter,\n  onClearCompleted,\n  ...props\n}) => {\n  return (\n    <div {...props} className=\"overview\">\n      <span>{`${tasksLeft} tasks`}</span>\n      <div className=\"overview-filterbar\">\n        <FilterBar\n          onSetFilter={(filter) => onSetFilter(filter)}\n          activeFilter={activeFilter}\n        />\n      </div>\n      <Button\n        label=\"Clear Completed\"\n        size=\"small\"\n        onClick={() => onClearCompleted()}\n      />\n    </div>\n  );\n};\n\nOverview.propTypes = {\n  /**\n   * How many task are left uncompleted\n   */\n  tasksLeft: PropTypes.number,\n  /**\n   * If clear completed btn is clicked\n   */\n  onClearCompleted: PropTypes.func,\n  /**\n   * Which filter is set active none - all - active - completed\n   */\n  activeFilter: PropTypes.oneOf([\"none\", \"all\", \"active\", \"completed\"]),\n  /**\n   * Optional click handler\n   */\n  onSetFilter: PropTypes.func,\n};\n\nOverview.defaultProps = {\n  tasksLeft: 0,\n  activeFilter: \"none\",\n  onClearCompleted: undefined,\n  onSetFilter: undefined,\n};\n","export default __webpack_public_path__ + \"static/media/icon-moon.6c03114b.svg\";","export default __webpack_public_path__ + \"static/media/icon-sun.910b1f9a.svg\";","const axios = require(\"axios\").default;\nconst api = axios.create({\n  baseURL: \"https://api-nodejs-todolist.herokuapp.com/\",\n});\n\nfunction setAuthHeader() {\n  const token = localStorage.getItem(\"token\");\n\n  if (token !== \"\") {\n    api.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n  }\n}\n\nconst register = async function (email, password) {\n  try {\n    const user = {\n      email: email,\n      password: password,\n      name: email.split(\".\")[0],\n      age: 21,\n    };\n\n    const createdUser = await api.post(\"user/register\", user);\n\n    return createdUser.data;\n  } catch (error) {\n    throw new Error(error.response.data);\n  }\n};\n\nconst login = async function (email, password) {\n  try {\n    if (password.length < 7)\n      throw new Error(\"Password length needs to be 7 chars minimum\");\n\n    const user = {\n      email: `${email}`,\n      password: password,\n    };\n\n    const loggedInUser = await api.post(\"user/login\", user);\n\n    return loggedInUser.data;\n  } catch (error) {\n    throw new Error(error.response.data);\n  }\n};\n\nconst logout = async function () {\n  try {\n    setAuthHeader();\n    await api.post(\"user/logout\");\n\n    return true;\n  } catch (error) {\n    throw new Error(error.response.data);\n  }\n};\n\n/* const getLoggedInUserProfile = async function () {\n  try {\n    setAuthHeader();\n    const user = await api.get(\"user/me\");\n\n    return user.data;\n  } catch (error) {\n    throw new Error(\"Api: getLoggedInUserProfile\", error);\n  }\n}; */\n\nconst getTasks = async function () {\n  try {\n    setAuthHeader();\n    const tasks = await api.get(\"task/\");\n    return tasks.data;\n  } catch (error) {\n    throw new Error(error.response.data);\n  }\n};\n\nconst addTask = async function (description) {\n  try {\n    if (!description) throw new Error(\"Api: addTask - no task given\");\n\n    setAuthHeader();\n\n    const createdTasks = await api.post(\"task/\", {\n      description: `${description}`,\n    });\n    return createdTasks.data;\n  } catch (error) {\n    throw new Error(error.response.data);\n  }\n};\n\nconst updateTask = async function (id, completed, description) {\n  try {\n    if (!id) throw new Error(\"Api: updateTask - no task given\");\n\n    let patch = {};\n    if (completed !== undefined || completed !== null)\n      patch.completed = completed;\n    if (description) patch.description = description;\n\n    setAuthHeader();\n    const updatedTask = await api.put(`task/${id}`, patch);\n\n    return updatedTask.data.data;\n  } catch (error) {\n    throw new Error(error.response.data);\n  }\n};\n\nconst deleteTask = async function (id, completed, description) {\n  try {\n    if (!id) throw new Error(\"Api: deleteTask - no task given\");\n\n    setAuthHeader();\n    const deleted = await api.delete(`task/${id}`);\n\n    return deleted.data;\n  } catch (error) {\n    throw new Error(error.response.data);\n  }\n};\n\nexport { register, login, logout, getTasks, addTask, updateTask, deleteTask };\n","import \"./styles/app.css\";\nimport { Login } from \"./components/Login/Login\";\nimport { AddTaskBar } from \"./components/AddTaskBar/AddTaskBar\";\nimport { Tasklist } from \"./components/Tasklist/Tasklist\";\nimport { Overview } from \"./components/Overview/Overview\";\nimport { FilterBar } from \"./components/FilterBar/FilterBar\";\nimport { Button } from \"./components/Button/Button\";\nimport moonIconPath from \"./images/icon-moon.svg\";\nimport sunIconPath from \"./images/icon-sun.svg\";\nimport { useEffect, useState } from \"react\";\n\nimport * as api from \"./services/api.service\";\n\nfunction App() {\n  //TODO: refactor into [darkMode, setDarkMode]\n  const [state, setValue] = useState({ darkMode: false });\n  const [tasks, setTasks] = useState([]);\n  const [loadingLogin, setLoadgingLogin] = useState(false);\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [loadTasks, setLoadTasks] = useState(false);\n  const [isAddingTask, setIsAddingTask] = useState(false);\n  const [filter, setFilter] = useState(\"all\");\n  const [displayed, setDisplayed] = useState([]);\n  const [ongoingAction, setOngoingAction] = useState(false);\n  const [loginError, setLoginError] = useState(\"\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      api.getTasks().then((res) => {\n        setTasks(res.data);\n        setDisplayed(res.data);\n        setLoadTasks(false);\n      });\n    };\n\n    const token = localStorage.getItem(\"token\");\n\n    if (token && token !== \"\") {\n      setLoggedIn(true);\n      setLoadTasks(true);\n      fetchData();\n    } else {\n      setLoggedIn(false);\n    }\n  }, [loggedIn]);\n\n  function tasksByFilter(tasks, filter) {\n    let newDisplayed;\n    if (filter === \"all\") newDisplayed = tasks.slice();\n\n    if (filter === \"active\") newDisplayed = tasks.filter((t) => !t.completed);\n\n    if (filter === \"completed\") newDisplayed = tasks.filter((t) => t.completed);\n\n    return newDisplayed;\n  }\n\n  return (\n    <div\n      className={`app bg-picture ${\n        state.darkMode ? \"bg-picture-dark\" : \"bg-picture-light\"\n      } ${state.darkMode ? \"dark-theme\" : \"\"}`}\n    >\n      <div className=\"content-wrapper\">\n        <header className=\"App-header\">\n          <h1 className=\"text--title\">TODO</h1>\n          <div className=\"header-controls\">\n            <button\n              className=\"theme-btn\"\n              onClick={() => {\n                setValue({ darkMode: !state.darkMode });\n              }}\n            >\n              <img\n                className=\"theme-icon\"\n                src={state.darkMode ? sunIconPath : moonIconPath}\n                alt={\n                  state.darkMode\n                    ? \"Sun Icon - Dark Mode is enabled\"\n                    : \"Moon Icon - Light Mode is enabled\"\n                }\n              />\n            </button>\n            <div className=\"btn-logout-wrapper\">\n              <Button\n                label=\"Logout\"\n                onClick={() => {\n                  api.logout();\n                  localStorage.removeItem(\"token\");\n                  setTasks([]);\n                  setDisplayed([]);\n                  setLoggedIn(false);\n                }}\n              />\n            </div>\n          </div>\n        </header>\n\n        <section\n          className={`card addTaskBar ${\n            isAddingTask ? \"loading-add-task\" : \"\"\n          }`}\n        >\n          <AddTaskBar\n            disabled={isAddingTask || loadTasks}\n            onAddTask={(description) => {\n              setIsAddingTask(true);\n\n              api\n                .addTask(description)\n                .then((res) => {\n                  const newTasks = [...tasks, res.data];\n                  setTasks(newTasks);\n\n                  let newDisplayed;\n                  if (filter === \"all\") newDisplayed = newTasks.slice();\n                  if (filter === \"active\")\n                    newDisplayed = newTasks.filter((t) => !t.completed);\n                  if (filter === \"completed\")\n                    newDisplayed = newTasks.filter((t) => t.completed);\n\n                  setDisplayed(newDisplayed);\n\n                  setIsAddingTask(false);\n                })\n                .catch((err) => {\n                  setIsAddingTask(false);\n                  console.log(err);\n                });\n            }}\n          />\n        </section>\n\n        <section className=\"card\">\n          <Tasklist\n            tasks={displayed}\n            disabled={ongoingAction}\n            loading={loadTasks}\n            onCompleteTask={(id, updateCompleteState) => {\n              if (!ongoingAction) {\n                setOngoingAction(true);\n\n                api.updateTask(id, updateCompleteState).then((updatedTask) => {\n                  const newTasks = tasks.slice();\n                  const indexOfUpdatedTask = newTasks.findIndex(\n                    (t) => t._id === id\n                  );\n                  newTasks[indexOfUpdatedTask] = updatedTask;\n                  setTasks(newTasks);\n\n                  setDisplayed(tasksByFilter(newTasks, filter));\n\n                  setOngoingAction(false);\n                });\n              }\n            }}\n            onDeleteTask={(id) => {\n              if (!ongoingAction) {\n                setOngoingAction(true);\n                api.deleteTask(id).then(() => {\n                  const newTasks = tasks.filter((t) => t._id !== id);\n                  setTasks(newTasks);\n\n                  setDisplayed(tasksByFilter(newTasks, filter));\n\n                  setOngoingAction(false);\n                });\n              }\n            }}\n            onSaveTask={(id, description) => {\n              if (!ongoingAction) {\n                setOngoingAction(true);\n\n                const task = tasks.find((t) => t._id === id);\n\n                //TODO: Refactoring API anpassen weil bei description muss complete mitgegeben werden\n                api\n                  .updateTask(id, task.completed, description)\n                  .then((updatedTask) => {\n                    const newTasks = tasks.slice();\n                    const indexOfUpdatedTask = newTasks.findIndex(\n                      (t) => t._id === id\n                    );\n                    newTasks[indexOfUpdatedTask] = updatedTask;\n                    setTasks(newTasks);\n\n                    setDisplayed(tasksByFilter(newTasks, filter));\n\n                    setOngoingAction(false);\n                  });\n              }\n            }}\n          />\n          {loadTasks ? null : (\n            <div className=\"tasks-overview\">\n              <Overview\n                tasksLeft={displayed.length}\n                activeFilter={filter}\n                onSetFilter={(newFilter) => {\n                  setFilter(newFilter);\n\n                  setDisplayed(tasksByFilter(tasks, newFilter));\n                }}\n                onClearCompleted={async () => {\n                  if (!ongoingAction) {\n                    setOngoingAction(true);\n\n                    const unclearedTasks = tasks.filter((t) => !t.completed);\n                    const clearedTasks = tasks.filter((t) => t.completed);\n                    const clearPromises = clearedTasks.map((t) =>\n                      api.deleteTask(t._id)\n                    );\n\n                    Promise.all(clearPromises).then(() => {\n                      setTasks(unclearedTasks);\n                      setDisplayed(tasksByFilter(unclearedTasks, filter));\n                      setOngoingAction(false);\n                    });\n                  }\n                }}\n              />{\" \"}\n            </div>\n          )}\n        </section>\n\n        {loadTasks ? null : (\n          <section className=\"app-filterbar card\">\n            <FilterBar\n              activeFilter={filter}\n              onSetFilter={(newFilter) => {\n                setFilter(newFilter);\n                let newTasks;\n                if (newFilter === \"all\") newTasks = tasks.slice();\n                if (newFilter === \"active\")\n                  newTasks = tasks.filter((t) => !t.completed);\n                if (newFilter === \"completed\")\n                  newTasks = tasks.filter((t) => t.completed);\n\n                setDisplayed(newTasks);\n              }}\n            />\n          </section>\n        )}\n      </div>\n\n      {loggedIn ? null : (\n        <Login\n          loading={loadingLogin}\n          errorMsg={loginError}\n          onRegister={(email, password) => {\n            setLoginError(\"\");\n            setLoadgingLogin(true);\n\n            api\n              .register(email, password)\n              .then((user) => {\n                localStorage.setItem(\"token\", user.token);\n                setLoadgingLogin(false);\n                setLoggedIn(true);\n              })\n              .catch((err) => {\n                setLoadgingLogin(false);\n                setLoginError(err.message);\n                console.log(err);\n              });\n          }}\n          onLogin={(email, password) => {\n            setLoginError(\"\");\n            setLoadgingLogin(true);\n\n            api\n              .login(email, password)\n              .then((user) => {\n                localStorage.setItem(\"token\", user.token);\n                setLoadgingLogin(false);\n                setLoggedIn(true);\n              })\n              .catch((err) => {\n                setLoadgingLogin(false);\n                setLoginError(\"Unable to login.\");\n                console.log(err);\n              });\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./styles/index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <style jsx=\"true\" global=\"true\">{`\n      html {\n        height: 100vh;\n      }\n      body {\n        min-height: 100%;\n        margin: 0px;\n        padding: 0px;\n      }\n    `}</style>\n    <App />\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}