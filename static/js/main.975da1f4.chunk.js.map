{"version":3,"sources":["components/Button/Button.jsx","components/Login/Login.jsx","components/AddTaskBar/AddTaskBar.jsx","images/icon-cross.svg","images/icon-check.svg","components/Task/Task.jsx","components/Tasklist/Tasklist.jsx","components/FilterBar/FilterBar.jsx","components/Overview/Overview.jsx","images/icon-moon.svg","images/icon-sun.svg","services/api.service.js","App.js","reportWebVitals.js","index.js"],"names":["Button","active","size","label","loading","props","type","disabled","className","join","defaultProps","onClick","undefined","usernameIsValid","str","match","length","passwordIsValid","password","Login","msg","onLogin","onRegister","errorMsg","useState","username","setUsername","setPassword","error","setError","imprint","setImprint","checkForErrors","useEffect","id","onKeyDown","e","key","htmlFor","placeholder","value","onChange","newUsername","target","newPassword","AddTaskBar","onAddTask","description","setDescription","displaySaveBtn","name","enteredDescription","Task","checked","task","onCompleteTask","onDeleteTask","onSaveTask","setValue","isUpdating","setIsUpdating","isDeleting","setIsDeleting","completed","tabIndex","src","checkIcon","alt","saveBtn","_id","event","stopPropagation","crossIcon","Tasklist","isLoading","tasks","events","map","FilterBar","activeFilter","onSetFilter","Overview","tasksLeft","onClearCompleted","filter","api","require","default","create","baseURL","setAuthHeader","token","localStorage","getItem","defaults","headers","common","register","email","a","user","split","age","post","createdUser","data","Error","response","login","loggedInUser","logout","getTasks","get","addTask","createdTasks","updateTask","patch","put","updatedTask","deleteTask","delete","deleted","App","darkMode","setDarkMode","setTasks","loadingLogin","setLoadgingLogin","loggedIn","setLoggedIn","loadTasks","setLoadTasks","isAddingTask","setIsAddingTask","setFilter","displayed","setDisplayed","ongoingAction","setOngoingAction","loginError","setLoginError","tasksByFilter","newDisplayed","slice","t","fetchData","then","res","mode","sunIconPath","moonIconPath","removeItem","newTasks","catch","err","console","log","updateCompleteState","indexOfUpdatedTask","findIndex","find","newFilter","unclearedTasks","clearedTasks","clearPromises","Promise","all","setItem","message","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","jsx","global","document","getElementById"],"mappings":"qeAIaA,EAAS,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,QAAYC,EAAY,iBACpE,OACE,8DACMA,GADN,IAEEC,KAAK,SACLC,SAAUH,EACVI,UAAW,CACT,MADS,UAENP,EAAS,cAAgB,IAFnB,eAGDC,GAHC,UAINE,EAAU,eAAiB,KAC9BK,KAAK,MACHJ,GAVN,aAYGF,MA4BPH,EAAOU,aAAe,CACpBT,QAAQ,EACRG,SAAS,EACTF,KAAM,SACNS,aAASC,G,oDC7CX,SAASC,EAAgBC,GAEvB,SAAIA,EAAIC,MADI,gBACYD,EAAIE,QAAU,GAMxC,SAASC,EAAgBC,GACvB,OAAOA,EAASF,QAAU,EAarB,IAAMG,EAAQ,SAAC,GAA0D,IAV1DC,EAUEC,EAAuD,EAAvDA,QAASC,EAA8C,EAA9CA,WAAYC,EAAkC,EAAlCA,SAAUnB,EAAwB,EAAxBA,QAAYC,EAAY,iBAC7E,EAAgCmB,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,mBAAS,IAAzC,mBAAON,EAAP,KAAiBS,EAAjB,KACA,EAA0BH,mBAAS,IAAnC,mBAAOI,EAAP,KAAcC,EAAd,KACA,EAA8BL,oBAAS,GAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KAMA,SAASC,EAAeP,EAAUP,GAChCW,EAAS,IAEJhB,EAAgBY,IACnBI,EACE,mGAGCZ,EAAgBC,IACnBW,EAAS,4DAENhB,EAAgBY,IAAcR,EAAgBC,IACjDW,EACE,4JAKN,OAtBAI,qBAAU,WACRJ,EAASN,KACR,CAACA,IAqBF,8CACEW,GAAG,SACC7B,GAFN,IAGE8B,UAAW,SAACC,GACI,UAAVA,EAAEC,MACJL,EAAeP,EAAUP,GAErBL,EAAgBY,IAAaR,EAAgBC,IAC/CG,EAAQ,GAAD,OAAII,EAAJ,wBAAoCP,KARnD,UAaE,sBAAKV,UAAU,aAAf,UACE,oBAAIA,UAAU,cAAd,kBACA,wBAAO8B,QAAQ,aAAa9B,UAAU,cAAtC,qBAEE,uBACED,SAAUH,EACVE,KAAK,OACL4B,GAAG,aACHK,YAAY,WACZC,MAAOf,EACPgB,SAAU,SAACL,GACT,IAAMM,EAAcN,EAAEO,OAAOH,MAC7Bd,EAAYgB,SAIlB,wBAAOJ,QAAQ,iBAAiB9B,UAAU,cAA1C,qBAEE,uBACED,SAAUH,EACVE,KAAK,WACL4B,GAAG,iBACHK,YAAY,UACZC,MAAOtB,EACPuB,SAAU,SAACL,GACT,IAAMQ,EAAcR,EAAEO,OAAOH,MAC7Bb,EAAYiB,SAKlB,wBACErC,SAAUH,EACVI,UAAS,oBAAeJ,EAAU,UAAY,IAC9CO,QAAS,WACPqB,EAAeP,EAAUP,GAErBL,EAAgBY,IAAaR,EAAgBC,IAC/CG,EAAQ,GAAD,OAAII,EAAJ,wBAAoCP,IAPjD,mBAcA,wBACEX,SAAUH,EACVI,UAAS,uBAAkBJ,EAAU,UAAY,IACjDO,QAAS,WACPqB,EAAeP,EAAUP,GAErBL,EAAgBY,IAAaR,EAAgBC,IAC/CI,EAAW,GAAD,OAAIG,EAAJ,wBAAoCP,IAPpD,uBAjGcE,EA+GAQ,EA9GfR,GAAe,KAARA,EAGV,qBAAKZ,UAAU,QAAf,SACE,mBAAGA,UAAU,YAAb,SAA0BY,MAJC,SAgH3B,mCACE,uDACA,cAAC,EAAD,CACEjB,MAAO2B,EAAU,uBAAe,wBAChCnB,QAAS,WACPoB,GAAYD,MAGfA,EACC,qBAAKtB,UAAU,UAAf,SACE,uFAEA,aAiBZW,EAAMT,aAAe,CACnBW,aAAST,EACTU,gBAAYV,EACZR,SAAS,EACTmB,SAAU,I,qCC/JCsB,EAAa,SAAC,GAAuC,IAArCtC,EAAoC,EAApCA,SAAUuC,EAA0B,EAA1BA,UAAczC,EAAY,iBAC/D,EAAsCmB,mBAAS,IAA/C,mBAAOuB,EAAP,KAAoBC,EAApB,KAEMC,EACY,KAAhBF,EACE,wBACExC,SAAUA,EACVC,UAAU,gBACVG,QAAS,kBAAMmC,EAAUC,IAH3B,iBAOE,KAEN,OACE,8CAAKvC,UAAU,UAAaH,GAA5B,cACE,qBAAKG,UAAU,WAEf,uBACED,SAAUA,EACVD,KAAK,OACL4B,GAAG,UACH1B,UAAU,cACV+B,YAAY,sBACZW,KAAK,OACLV,MAAOO,EACPN,SAAU,SAACL,GACT,IAAMe,EAAqBf,EAAEO,OAAOH,MACpCQ,EAAeG,IAEjBhB,UAAW,SAACC,GACI,UAAVA,EAAEC,KAAmC,KAAhBU,GACvBD,EAAUC,MAKfE,OAYPJ,EAAWnC,aAAe,CACxBoC,eAAWlC,EACXL,UAAU,G,gBCvDG,MAA0B,uCCA1B,MAA0B,uC,mECM5B6C,EAAO,SAAC,GAOd,IAUDC,EAhBJC,EAMI,EANJA,KACA/C,EAKI,EALJA,SACAgD,EAII,EAJJA,eACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,WAGA,GADI,iBACsBjC,mBAAS,KAAnC,mBAAOgB,EAAP,KAAckB,EAAd,KACA,EAAoClC,oBAAS,GAA7C,mBAAOmC,EAAP,KAAmBC,EAAnB,KACA,EAAoCpC,oBAAS,GAA7C,mBAAOqC,EAAP,KAAmBC,EAAnB,KAEA7B,qBAAU,WACRyB,EAASJ,EAAKP,aACda,GAAc,KACb,CAACN,IAGAA,EAAKS,YACPV,EACE,qBACEW,SAAS,IACTC,IAAKC,EACL1D,UAAU,iBACV2D,IAAI,+BAKV,IAAMC,EACJ,wBACE7D,SAAUA,EACVC,UAAU,WACVG,QAAS,WACPiD,GAAc,GACdH,EAAWH,EAAKe,IAAK7B,IALzB,kBAYF,OACE,sBAAKhC,UAAS,eAAUqD,GAAcF,EAAa,cAAgB,IAAnE,UACE,wBACEpD,SAAUA,EACVC,UAAS,mBAAc8C,EAAKS,UAAY,cAAgB,GAA/C,YACPT,EAAKS,UAAY,GAAK,oBAExBpD,QAAS,WACPiD,GAAc,GACdL,EAAeD,EAAKe,KAAMf,EAAKS,YAPnC,SAUGV,IAGH,uBACE9C,SAAUA,EACVD,KAAK,OACL4B,GAAE,sBAAiBoB,EAAKe,KACxB7D,UAAS,sBAAiB8C,EAAKS,UAAY,gBAAkB,IAC7Db,KAAK,cACLV,MAAOA,EACPC,SAAU,SAACL,GACTsB,EAAStB,EAAEO,OAAOH,QAEpBL,UAAW,SAACC,GACI,UAAVA,EAAEC,KAAsC,KAAnBD,EAAEO,OAAOH,QAChCoB,GAAc,GACdH,EAAWH,EAAKe,IAAK7B,OAK1Bc,EAAKP,cAAgBP,EAAQ4B,EAAU,KAExC,qBAAKzD,QAAS,SAAC2D,GAAD,OAAWA,EAAMC,mBAA/B,SACE,wBACEhE,SAAUA,EACVC,UAAU,SACVG,QAAS,WACPmD,GAAc,GACdN,EAAaF,EAAKe,MALtB,SAQE,qBAAKJ,IAAKO,EAAWhE,UAAU,cAAc2D,IAAI,yBAoC3Df,EAAK1C,aAAe,CAClBH,cAAUK,EACVD,aAASC,EACT2C,oBAAgB3C,EAChB4C,kBAAc5C,EACd6C,gBAAY7C,G,kFC/HD6D,EAAW,SAAC,GAQlB,IAGqBC,EAV1BC,EAOI,EAPJA,MACAvE,EAMI,EANJA,QACAG,EAKI,EALJA,SACAgD,EAII,EAJJA,eACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,WAGMmB,GADF,iBACW,CAAErB,iBAAgBC,eAAcC,eA4B/C,OAAO,qBAAKjD,UAAU,WAAf,UA1BmBkE,EA0BgBtE,EAzBpCsE,EAEA,sBAAKlE,UAAU,SAAf,UACE,qBAAKA,UAAU,gBACf,qBAAKA,UAAU,gBACf,qBAAKA,UAAU,mBAIfmE,EAAM3D,OAAS,EACV2D,EAAME,KAAI,SAACvB,GAAD,OACf,cAAC,EAAD,aACE/C,SAAUA,EACVC,UAAU,OAEV8C,KAAMA,GACFsB,GALN,eAGetB,EAAKe,SAMf,qBAAK7D,UAAU,WAAf,kDAuBfiE,EAAS/D,aAAe,CACtBN,SAAS,EACTmD,oBAAgB3C,EAChB4C,kBAAc5C,EACd6C,gBAAY7C,G,iDC5DDkE,EAAY,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,aAAcC,EAA4B,EAA5BA,YAAgB3E,EAAY,iBACpE,OACE,gDAASA,GAAT,IAAgBG,UAAU,SAA1B,UACE,cAAC,EAAD,CACEL,MAAM,MACNF,OAAyB,QAAjB8E,EACRpE,QAAS,kBAAMqE,EAAY,UAE7B,cAAC,EAAD,CACE7E,MAAM,SACNF,OAAyB,WAAjB8E,EACRpE,QAAS,kBAAMqE,EAAY,aAE7B,cAAC,EAAD,CACE7E,MAAM,YACNF,OAAyB,cAAjB8E,EACRpE,QAAS,kBAAMqE,EAAY,qBAiBnCF,EAAUpE,aAAe,CACvBqE,aAAc,OACdC,iBAAapE,G,oEClCFqE,EAAW,SAAC,GAMlB,IALLC,EAKI,EALJA,UACAH,EAII,EAJJA,aACAC,EAGI,EAHJA,YACAG,EAEI,EAFJA,iBACG9E,EACC,iBACJ,OACE,gDAASA,GAAT,IAAgBG,UAAU,WAA1B,UACE,yCAAU0E,EAAV,YACA,qBAAK1E,UAAU,qBAAf,SACE,cAAC,EAAD,CACEwE,YAAa,SAACI,GAAD,OAAYJ,EAAYI,IACrCL,aAAcA,MAGlB,cAAC,EAAD,CACE5E,MAAM,kBACND,KAAK,QACLS,QAAS,kBAAMwE,YAyBvBF,EAASvE,aAAe,CACtBwE,UAAW,EACXH,aAAc,OACdI,sBAAkBvE,EAClBoE,iBAAapE,GCtDA,UAA0B,sCCA1B,MAA0B,qCCCnCyE,EADQC,EAAQ,IAASC,QACbC,OAAO,CACvBC,QAAS,+CAGX,SAASC,IACP,IAAMC,EAAQC,aAAaC,QAAQ,SAErB,KAAVF,IACFN,EAAIS,SAASC,QAAQC,OAArB,+BAAyDL,IAI7D,IAAMM,EAAQ,uCAAG,WAAgBC,EAAOhF,GAAvB,iBAAAiF,EAAA,sEAEPC,EAAO,CACXF,MAAOA,EACPhF,SAAUA,EACVgC,KAAMgD,EAAMG,MAAM,KAAK,GACvBC,IAAK,IANM,SASajB,EAAIkB,KAAK,gBAAiBH,GATvC,cASPI,EATO,yBAWNA,EAAYC,MAXN,sCAaP,IAAIC,MAAM,KAAMC,SAASF,MAblB,yDAAH,wDAiBRG,EAAK,uCAAG,WAAgBV,EAAOhF,GAAvB,iBAAAiF,EAAA,oEAENjF,EAASF,OAAS,GAFZ,sBAGF,IAAI0F,MAAM,+CAHR,cAKJN,EAAO,CACXF,MAAM,GAAD,OAAKA,GACVhF,SAAUA,GAPF,SAUiBmE,EAAIkB,KAAK,aAAcH,GAVxC,cAUJS,EAVI,yBAYHA,EAAaJ,MAZV,wCAcJ,IAAIC,MAAM,KAAMC,SAASF,MAdrB,0DAAH,wDAkBLK,EAAM,uCAAG,sBAAAX,EAAA,sEAEXT,IAFW,SAGLL,EAAIkB,KAAK,eAHJ,iCAKJ,GALI,sCAOL,IAAIG,MAAM,KAAMC,SAASF,MAPpB,yDAAH,qDAsBNM,EAAQ,uCAAG,4BAAAZ,EAAA,sEAEbT,IAFa,SAGOL,EAAI2B,IAAI,SAHf,cAGPrC,EAHO,yBAINA,EAAM8B,MAJA,sCAMP,IAAIC,MAAM,KAAMC,SAASF,MANlB,yDAAH,qDAURQ,EAAO,uCAAG,WAAgBlE,GAAhB,eAAAoD,EAAA,kEAEPpD,EAFO,sBAEY,IAAI2D,MAAM,gCAFtB,cAIZhB,IAJY,SAMeL,EAAIkB,KAAK,QAAS,CAC3CxD,YAAY,GAAD,OAAKA,KAPN,cAMNmE,EANM,yBASLA,EAAaT,MATR,wCAWN,IAAIC,MAAM,KAAMC,SAASF,MAXnB,0DAAH,sDAePU,EAAU,uCAAG,WAAgBjF,EAAI6B,EAAWhB,GAA/B,iBAAAoD,EAAA,kEAEVjE,EAFU,sBAEA,IAAIwE,MAAM,mCAFV,cAIXU,EAAQ,QACMxG,IAAdmD,GAAyC,OAAdA,IAC7BqD,EAAMrD,UAAYA,GAChBhB,IAAaqE,EAAMrE,YAAcA,GAErC2C,IATe,SAUWL,EAAIgC,IAAJ,eAAgBnF,GAAMkF,GAVjC,cAUTE,EAVS,yBAYRA,EAAYb,KAAKA,MAZT,wCAcT,IAAIC,MAAM,KAAMC,SAASF,MAdhB,0DAAH,0DAkBVc,EAAU,uCAAG,WAAgBrF,EAAI6B,EAAWhB,GAA/B,eAAAoD,EAAA,kEAEVjE,EAFU,sBAEA,IAAIwE,MAAM,mCAFV,cAIfhB,IAJe,SAKOL,EAAImC,OAAJ,eAAmBtF,IAL1B,cAKTuF,EALS,yBAORA,EAAQhB,MAPA,wCAST,IAAIC,MAAM,KAAMC,SAASF,MAThB,0DAAH,0DC+KDiB,MAnRf,WACE,MAAgClG,oBAAS,GAAzC,mBAAOmG,EAAP,KAAiBC,EAAjB,KACA,EAA0BpG,mBAAS,IAAnC,mBAAOmD,EAAP,KAAckD,EAAd,KACA,EAAyCrG,oBAAS,GAAlD,mBAAOsG,EAAP,KAAqBC,EAArB,KACA,EAAgCvG,oBAAS,GAAzC,mBAAOwG,EAAP,KAAiBC,EAAjB,KACA,EAAkCzG,oBAAS,GAA3C,mBAAO0G,EAAP,KAAkBC,EAAlB,KACA,EAAwC3G,oBAAS,GAAjD,mBAAO4G,EAAP,KAAqBC,EAArB,KACA,EAA4B7G,mBAAS,OAArC,mBAAO4D,EAAP,KAAekD,EAAf,KACA,EAAkC9G,mBAAS,IAA3C,mBAAO+G,EAAP,KAAkBC,EAAlB,KACA,EAA0ChH,oBAAS,GAAnD,oBAAOiH,GAAP,MAAsBC,GAAtB,MACA,GAAoClH,mBAAS,IAA7C,qBAAOmH,GAAP,MAAmBC,GAAnB,MAsBA,SAASC,GAAclE,EAAOS,GAC5B,IAAI0D,EAOJ,MANe,QAAX1D,IAAkB0D,EAAenE,EAAMoE,SAE5B,WAAX3D,IAAqB0D,EAAenE,EAAMS,QAAO,SAAC4D,GAAD,OAAQA,EAAEjF,cAEhD,cAAXqB,IAAwB0D,EAAenE,EAAMS,QAAO,SAAC4D,GAAD,OAAOA,EAAEjF,cAE1D+E,EAGT,OA/BA7G,qBAAU,WACR,IAAMgH,EAAS,uCAAG,sBAAA9C,EAAA,sDAChBd,IAAe6D,MAAK,SAACC,GACnBtB,EAASsB,EAAI1C,MACb+B,EAAaW,EAAI1C,MACjB0B,GAAa,MAJC,2CAAH,qDAQTxC,EAAQC,aAAaC,QAAQ,SAE/BF,GAAmB,KAAVA,GACXsC,GAAY,GACZE,GAAa,GACbc,KAEAhB,GAAY,KAEb,CAACD,IAcF,sBACExH,UAAS,yBACPmH,EAAW,kBAAoB,mBADxB,YAELA,EAAW,aAAe,IAHhC,UAKE,sBAAKnH,UAAU,kBAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,oBAAIA,UAAU,cAAd,kBACA,sBAAKA,UAAU,kBAAf,UACE,wBACEA,UAAU,YACVG,QAAS,WACPiH,GAAY,SAACwB,GAAD,OAAWA,MAH3B,SAME,qBACE5I,UAAU,aACVyD,IAAK0D,EAAW0B,EAAcC,EAC9BnF,IACEwD,EACI,kCACA,wCAIV,qBAAKnH,UAAU,qBAAf,SACE,cAAC,EAAD,CACEL,MAAM,SACNQ,QAAS,WACP0E,IACAO,aAAa2D,WAAW,SACxB1B,EAAS,IACTW,EAAa,IACbP,GAAY,cAOtB,yBACEzH,UAAS,0BACP4H,EAAe,mBAAqB,IAFxC,SAKE,cAAC,EAAD,CACE7H,SAAU6H,GAAgBF,EAC1BpF,UAAW,SAACC,GACVsF,GAAgB,GAEhBhD,EACWtC,GACRmG,MAAK,SAACC,GACL,IAGIL,EAHEU,EAAQ,sBAAO7E,GAAP,CAAcwE,EAAI1C,OAChCoB,EAAS2B,GAGM,QAAXpE,IAAkB0D,EAAeU,EAAST,SAC/B,WAAX3D,IACF0D,EAAeU,EAASpE,QAAO,SAAC4D,GAAD,OAAQA,EAAEjF,cAC5B,cAAXqB,IACF0D,EAAeU,EAASpE,QAAO,SAAC4D,GAAD,OAAOA,EAAEjF,cAE1CyE,EAAaM,GAEbT,GAAgB,MAEjBoB,OAAM,SAACC,GACNrB,GAAgB,GAChBsB,QAAQC,IAAIF,WAMtB,0BAASlJ,UAAU,OAAnB,UACE,cAAC,EAAD,CACEmE,MAAO4D,EACPhI,SAAUkI,GACVrI,QAAS8H,EACT3E,eAAgB,SAACrB,EAAI2H,GACdpB,KACHC,IAAiB,GAEjBrD,EAAenD,EAAI2H,GAAqBX,MAAK,SAAC5B,GAC5C,IAAMkC,EAAW7E,EAAMoE,QACjBe,EAAqBN,EAASO,WAClC,SAACf,GAAD,OAAOA,EAAE3E,MAAQnC,KAEnBsH,EAASM,GAAsBxC,EAC/BO,EAAS2B,GAEThB,EAAaK,GAAcW,EAAUpE,IAErCsD,IAAiB,QAIvBlF,aAAc,SAACtB,GACRuG,KACHC,IAAiB,GACjBrD,EAAenD,GAAIgH,MAAK,WACtB,IAAMM,EAAW7E,EAAMS,QAAO,SAAC4D,GAAD,OAAOA,EAAE3E,MAAQnC,KAC/C2F,EAAS2B,GAEThB,EAAaK,GAAcW,EAAUpE,IAErCsD,IAAiB,QAIvBjF,WAAY,SAACvB,EAAIa,GACf,IAAK0F,GAAe,CAClBC,IAAiB,GAEjB,IAAMpF,EAAOqB,EAAMqF,MAAK,SAAChB,GAAD,OAAOA,EAAE3E,MAAQnC,KAGzCmD,EACcnD,EAAIoB,EAAKS,UAAWhB,GAC/BmG,MAAK,SAAC5B,GACL,IAAMkC,EAAW7E,EAAMoE,QACjBe,EAAqBN,EAASO,WAClC,SAACf,GAAD,OAAOA,EAAE3E,MAAQnC,KAEnBsH,EAASM,GAAsBxC,EAC/BO,EAAS2B,GAEThB,EAAaK,GAAcW,EAAUpE,IAErCsD,IAAiB,UAK1BR,EAAY,KACX,sBAAK1H,UAAU,iBAAf,UACE,cAAC,EAAD,CACE0E,UAAWqD,EAAUvH,OACrB+D,aAAcK,EACdJ,YAAa,SAACiF,GACZ3B,EAAU2B,GAEVzB,EAAaK,GAAclE,EAAOsF,KAEpC9E,iBAAgB,sBAAE,gCAAAgB,EAAA,sDACXsC,KACHC,IAAiB,GAEXwB,EAAiBvF,EAAMS,QAAO,SAAC4D,GAAD,OAAQA,EAAEjF,aACxCoG,EAAexF,EAAMS,QAAO,SAAC4D,GAAD,OAAOA,EAAEjF,aACrCqG,EAAgBD,EAAatF,KAAI,SAACmE,GAAD,OACrC3D,EAAe2D,EAAE3E,QAGnBgG,QAAQC,IAAIF,GAAelB,MAAK,WAC9BrB,EAASqC,GACT1B,EAAaK,GAAcqB,EAAgB9E,IAC3CsD,IAAiB,OAbL,6CAiBjB,UAKRR,EAAY,KACX,yBAAS1H,UAAU,qBAAnB,SACE,cAAC,EAAD,CACEuE,aAAcK,EACdJ,YAAa,SAACiF,GAEZ,IAAIT,EADJlB,EAAU2B,GAEQ,QAAdA,IAAqBT,EAAW7E,EAAMoE,SACxB,WAAdkB,IACFT,EAAW7E,EAAMS,QAAO,SAAC4D,GAAD,OAAQA,EAAEjF,cAClB,cAAdkG,IACFT,EAAW7E,EAAMS,QAAO,SAAC4D,GAAD,OAAOA,EAAEjF,cAEnCyE,EAAagB,WAOtBxB,EAAW,KACV,cAAC,EAAD,CACE5H,QAAS0H,EACTvG,SAAUoH,GACVrH,WAAY,SAAC4E,EAAOhF,GAClB0H,GAAc,IACdb,GAAiB,GAEjB1C,EACYa,EAAOhF,GAChBgI,MAAK,SAAC9C,GACLR,aAAa2E,QAAQ,QAASnE,EAAKT,OACnCoC,GAAiB,GACjBE,GAAY,MAEbwB,OAAM,SAACC,GACN3B,GAAiB,GACjBa,GAAcc,EAAIc,SAClBb,QAAQC,IAAIF,OAGlBrI,QAAS,SAAC6E,EAAOhF,GACf0H,GAAc,IACdb,GAAiB,GAEjB1C,EACSa,EAAOhF,GACbgI,MAAK,SAAC9C,GACLR,aAAa2E,QAAQ,QAASnE,EAAKT,OACnCoC,GAAiB,GACjBE,GAAY,MAEbwB,OAAM,SAACC,GACN3B,GAAiB,GACjBa,GAAc,oBACde,QAAQC,IAAIF,aC3Qbe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCDdO,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,uBAAOC,IAAI,OAAOC,OAAO,OAAzB,kKAUA,cAAC,EAAD,OAGFC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.975da1f4.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./button.css\";\n\nexport const Button = ({ active, size, label, loading, ...props }) => {\n  return (\n    <button\n      {...props}\n      type=\"button\"\n      disabled={loading}\n      className={[\n        \"btn\",\n        `${active ? \"btn--active\" : \"\"}`,\n        `btn--${size}`,\n        `${loading ? \"btn--loading\" : \"\"}`,\n      ].join(\" \")}\n      {...props}\n    >\n      {label}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  /**\n   * In which variant should the button rendered primary, secondary or text\n   */\n  active: PropTypes.bool,\n  /**\n   * How large should the button be?\n   */\n  size: PropTypes.oneOf([\"small\", \"normal\"]),\n  /**\n   * Button contents\n   */\n  label: PropTypes.string.isRequired,\n  /**\n   * Button will be deactivated while loading\n   */\n  loading: PropTypes.bool,\n  /**\n   * Optional click handler\n   */\n  onClick: PropTypes.func,\n};\n\nButton.defaultProps = {\n  active: false,\n  loading: false,\n  size: \"normal\",\n  onClick: undefined,\n};\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./login.css\";\nimport { Button } from \"../Button/Button\";\n\nfunction usernameIsValid(str) {\n  var regex = /^[A-Za-z]+$/;\n  if (str.match(regex) && str.length >= 3) {\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction passwordIsValid(password) {\n  return password.length >= 7 ? true : false;\n}\n\nfunction showErrorMsg(msg) {\n  if (!msg || msg === \"\") return null;\n\n  return (\n    <div className=\"error\">\n      <p className=\"error-msg\">{msg}</p>\n    </div>\n  );\n}\n\nexport const Login = ({ onLogin, onRegister, errorMsg, loading, ...props }) => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [imprint, setImprint] = useState(false);\n\n  useEffect(() => {\n    setError(errorMsg);\n  }, [errorMsg]);\n\n  function checkForErrors(username, password) {\n    setError(\"\");\n\n    if (!usernameIsValid(username))\n      setError(\n        \"The name must contain only alphabetical letters and must have a minumum length of 3 characters.\"\n      );\n\n    if (!passwordIsValid(password))\n      setError(\"The password must have a minimum length of 7 characters.\");\n\n    if (!usernameIsValid(username) && !passwordIsValid(password)) {\n      setError(\n        \"The name must contain only alphabetical letters, must have a minumum length of 3 characters and the password must have a minimum length of 7 characters.\"\n      );\n    }\n  }\n\n  return (\n    <div\n      id=\"login\"\n      {...props}\n      onKeyDown={(e) => {\n        if (e.key === \"Enter\") {\n          checkForErrors(username, password);\n\n          if (usernameIsValid(username) && passwordIsValid(password)) {\n            onLogin(`${username}.testing@testing.com`, password);\n          }\n        }\n      }}\n    >\n      <div className=\"login-card\">\n        <h1 className=\"text--title\">TODO</h1>\n        <label htmlFor=\"login-name\" className=\"login-input\">\n          Username\n          <input\n            disabled={loading}\n            type=\"text\"\n            id=\"login-name\"\n            placeholder=\"Username\"\n            value={username}\n            onChange={(e) => {\n              const newUsername = e.target.value;\n              setUsername(newUsername);\n            }}\n          />\n        </label>\n        <label htmlFor=\"login-password\" className=\"login-input\">\n          Password\n          <input\n            disabled={loading}\n            type=\"password\"\n            id=\"login-password\"\n            placeholder=\"*******\"\n            value={password}\n            onChange={(e) => {\n              const newPassword = e.target.value;\n              setPassword(newPassword);\n            }}\n          />\n        </label>\n\n        <button\n          disabled={loading}\n          className={`login-btn ${loading ? \"loading\" : \"\"}`}\n          onClick={() => {\n            checkForErrors(username, password);\n\n            if (usernameIsValid(username) && passwordIsValid(password)) {\n              onLogin(`${username}.testing@testing.com`, password);\n            }\n          }}\n        >\n          Login\n        </button>\n\n        <button\n          disabled={loading}\n          className={`register-btn ${loading ? \"loading\" : \"\"}`}\n          onClick={() => {\n            checkForErrors(username, password);\n\n            if (usernameIsValid(username) && passwordIsValid(password)) {\n              onRegister(`${username}.testing@testing.com`, password);\n            }\n          }}\n        >\n          Register\n        </button>\n\n        {showErrorMsg(error)}\n      </div>\n      <footer>\n        <p>Made with ❤️</p>\n        <Button\n          label={imprint ? \"🙈 Imprint\" : \"👀  Imprint\"}\n          onClick={() => {\n            setImprint(!imprint);\n          }}\n        />\n        {imprint ? (\n          <div className=\"imprint\">\n            <p>https://github.com/FocusCookie/fm-todo-app-react-api</p>\n          </div>\n        ) : null}\n      </footer>\n    </div>\n  );\n};\n\nLogin.propTypes = {\n  // Handler when username is valid and the password is provided and wants to login\n  onLogin: PropTypes.func,\n  // Handler when username is valid and the password is provided and wants to register\n  onRegister: PropTypes.func,\n  // error msg to dispay\n  errorMsg: PropTypes.string,\n  // Loader to Disable inputs and button\n  loading: PropTypes.bool,\n};\n\nLogin.defaultProps = {\n  onLogin: undefined,\n  onRegister: undefined,\n  loading: false,\n  errorMsg: \"\",\n};\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./addTaskBar.css\";\n\nexport const AddTaskBar = ({ disabled, onAddTask, ...props }) => {\n  const [description, setDescription] = useState(\"\");\n\n  const displaySaveBtn =\n    description !== \"\" ? (\n      <button\n        disabled={disabled}\n        className=\"addbar-adtbtn\"\n        onClick={() => onAddTask(description)}\n      >\n        add\n      </button>\n    ) : null;\n\n  return (\n    <div className=\"addbar\" {...props}>\n      <div className=\"circle\"></div>\n\n      <input\n        disabled={disabled}\n        type=\"text\"\n        id=\"addTask\"\n        className=\"addbar-task\"\n        placeholder=\"Create a new todo..\"\n        name=\"task\"\n        value={description}\n        onChange={(e) => {\n          const enteredDescription = e.target.value;\n          setDescription(enteredDescription);\n        }}\n        onKeyDown={(e) => {\n          if (e.key === \"Enter\" && description !== \"\") {\n            onAddTask(description);\n          }\n        }}\n      />\n\n      {displaySaveBtn}\n    </div>\n  );\n};\n\nAddTaskBar.propTypes = {\n  // Handler if a task is entered and commited via the save btn or hitting enter\n  onAddTask: PropTypes.func,\n  // loader\n  disabled: PropTypes.bool,\n};\n\nAddTaskBar.defaultProps = {\n  onAddTask: undefined,\n  disabled: false,\n};\n","export default __webpack_public_path__ + \"static/media/icon-cross.6ee81d30.svg\";","export default __webpack_public_path__ + \"static/media/icon-check.a8fb15d0.svg\";","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./task.css\";\nimport crossIcon from \"../../images/icon-cross.svg\";\nimport checkIcon from \"../../images/icon-check.svg\";\n\nexport const Task = ({\n  task,\n  disabled,\n  onCompleteTask,\n  onDeleteTask,\n  onSaveTask,\n  ...props\n}) => {\n  const [value, setValue] = useState(\"\");\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  useEffect(() => {\n    setValue(task.description);\n    setIsUpdating(false);\n  }, [task]);\n\n  let checked;\n  if (task.completed) {\n    checked = (\n      <img\n        tabIndex=\"1\"\n        src={checkIcon}\n        className=\"check--checked\"\n        alt=\"Check a task as complete.\"\n      />\n    );\n  }\n\n  const saveBtn = (\n    <button\n      disabled={disabled}\n      className=\"save-btn\"\n      onClick={() => {\n        setIsUpdating(true);\n        onSaveTask(task._id, value);\n      }}\n    >\n      save\n    </button>\n  );\n\n  return (\n    <div className={`task ${isDeleting || isUpdating ? \"delete-glow\" : \"\"}`}>\n      <button\n        disabled={disabled}\n        className={`checkbox ${task.completed ? \"checkbox-bg\" : \"\"} ${\n          task.completed ? \"\" : \"check--unchecked\"\n        }`}\n        onClick={() => {\n          setIsUpdating(true);\n          onCompleteTask(task._id, !task.completed);\n        }}\n      >\n        {checked}\n      </button>\n\n      <input\n        disabled={disabled}\n        type=\"text\"\n        id={`description-${task._id}`}\n        className={`description ${task.completed ? \"text--checked\" : \"\"}`}\n        name=\"description\"\n        value={value}\n        onChange={(e) => {\n          setValue(e.target.value);\n        }}\n        onKeyDown={(e) => {\n          if (e.key === \"Enter\" && e.target.value !== \"\") {\n            setIsUpdating(true);\n            onSaveTask(task._id, value);\n          }\n        }}\n      />\n\n      {task.description !== value ? saveBtn : null}\n\n      <div onClick={(event) => event.stopPropagation()}>\n        <button\n          disabled={disabled}\n          className=\"delete\"\n          onClick={() => {\n            setIsDeleting(true);\n            onDeleteTask(task._id);\n          }}\n        >\n          <img src={crossIcon} className=\"delete-icon\" alt=\"Delete task.\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nTask.propTypes = {\n  /** Composition of the task */\n  task: PropTypes.shape({\n    // Id of the task\n    _id: PropTypes.string.isRequired,\n\n    // description of the task or the actual task\n    description: PropTypes.string.isRequired,\n\n    // State of the task\n    completed: PropTypes.bool,\n  }),\n\n  /**  disable inputs and buttons   */\n  disabled: PropTypes.bool,\n\n  /**  Optional click handler   */\n  onClick: PropTypes.func,\n\n  /**  Handler for clicking the complete checkbox */\n  onCompleteTask: PropTypes.func,\n\n  /**  Handler for clicking the Cross icon */\n  onDeleteTask: PropTypes.func,\n\n  /**  Handler when the input is changed */\n  onSaveTask: PropTypes.func,\n};\n\nTask.defaultProps = {\n  disabled: undefined,\n  onClick: undefined,\n  onCompleteTask: undefined,\n  onDeleteTask: undefined,\n  onSaveTask: undefined,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./tasklist.css\";\n\nimport { Task } from \"../Task/Task\";\n\nexport const Tasklist = ({\n  tasks,\n  loading,\n  disabled,\n  onCompleteTask,\n  onDeleteTask,\n  onSaveTask,\n  ...props\n}) => {\n  const events = { onCompleteTask, onDeleteTask, onSaveTask };\n\n  const display = function (isLoading) {\n    if (isLoading) {\n      return (\n        <div className=\"loader\">\n          <div className=\"loader-item\"></div>\n          <div className=\"loader-item\"></div>\n          <div className=\"loader-item\"></div>\n        </div>\n      );\n    } else {\n      if (tasks.length > 0) {\n        return tasks.map((task) => (\n          <Task\n            disabled={disabled}\n            className=\"task\"\n            key={`task-${task._id}`}\n            task={task}\n            {...events}\n          />\n        ));\n      } else {\n        return <div className=\"no-tasks\">No Tasks to display 😢</div>;\n      }\n    }\n  };\n\n  return <div className=\"Tasklist\">{display(loading)}</div>;\n};\n\nTasklist.propTypes = {\n  /** Array of Tasks */\n  /**  Handler for clicking the complete checkbox */\n  tasks: PropTypes.array,\n\n  /**  Handler for clicking the complete checkbox */\n  onCompleteTask: PropTypes.func,\n\n  /**  Handler for clicking the Cross icon */\n  onDeleteTask: PropTypes.func,\n\n  /**  Handler when the input is changed */\n  onSaveTask: PropTypes.func,\n};\n\nTasklist.defaultProps = {\n  loading: true,\n  onCompleteTask: undefined,\n  onDeleteTask: undefined,\n  onSaveTask: undefined,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./filterBar.css\";\nimport { Button } from \"../Button/Button\";\n\nexport const FilterBar = ({ activeFilter, onSetFilter, ...props }) => {\n  return (\n    <div {...props} className=\"filter\">\n      <Button\n        label=\"All\"\n        active={activeFilter === \"all\"}\n        onClick={() => onSetFilter(\"all\")}\n      />\n      <Button\n        label=\"Active\"\n        active={activeFilter === \"active\"}\n        onClick={() => onSetFilter(\"active\")}\n      />\n      <Button\n        label=\"Completed\"\n        active={activeFilter === \"completed\"}\n        onClick={() => onSetFilter(\"completed\")}\n      />\n    </div>\n  );\n};\n\nFilterBar.propTypes = {\n  /**\n   * Which filter is set active none - all - active - completed\n   */\n  activeFilter: PropTypes.oneOf([\"none\", \"all\", \"active\", \"completed\"]),\n  /**\n   * Optional click handler\n   */\n  onSetFilter: PropTypes.func,\n};\n\nFilterBar.defaultProps = {\n  activeFilter: \"none\",\n  onSetFilter: undefined,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./overview.css\";\nimport { Button } from \"../Button/Button\";\nimport { FilterBar } from \"../FilterBar/FilterBar\";\n\nexport const Overview = ({\n  tasksLeft,\n  activeFilter,\n  onSetFilter,\n  onClearCompleted,\n  ...props\n}) => {\n  return (\n    <div {...props} className=\"overview\">\n      <span>{`${tasksLeft} tasks`}</span>\n      <div className=\"overview-filterbar\">\n        <FilterBar\n          onSetFilter={(filter) => onSetFilter(filter)}\n          activeFilter={activeFilter}\n        />\n      </div>\n      <Button\n        label=\"Clear Completed\"\n        size=\"small\"\n        onClick={() => onClearCompleted()}\n      />\n    </div>\n  );\n};\n\nOverview.propTypes = {\n  /**\n   * How many task are left uncompleted\n   */\n  tasksLeft: PropTypes.number,\n  /**\n   * If clear completed btn is clicked\n   */\n  onClearCompleted: PropTypes.func,\n  /**\n   * Which filter is set active none - all - active - completed\n   */\n  activeFilter: PropTypes.oneOf([\"none\", \"all\", \"active\", \"completed\"]),\n  /**\n   * Optional click handler\n   */\n  onSetFilter: PropTypes.func,\n};\n\nOverview.defaultProps = {\n  tasksLeft: 0,\n  activeFilter: \"none\",\n  onClearCompleted: undefined,\n  onSetFilter: undefined,\n};\n","export default __webpack_public_path__ + \"static/media/icon-moon.6c03114b.svg\";","export default __webpack_public_path__ + \"static/media/icon-sun.910b1f9a.svg\";","const axios = require(\"axios\").default;\nconst api = axios.create({\n  baseURL: \"https://api-nodejs-todolist.herokuapp.com/\",\n});\n\nfunction setAuthHeader() {\n  const token = localStorage.getItem(\"token\");\n\n  if (token !== \"\") {\n    api.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n  }\n}\n\nconst register = async function (email, password) {\n  try {\n    const user = {\n      email: email,\n      password: password,\n      name: email.split(\".\")[0],\n      age: 21,\n    };\n\n    const createdUser = await api.post(\"user/register\", user);\n\n    return createdUser.data;\n  } catch (error) {\n    throw new Error(error.response.data);\n  }\n};\n\nconst login = async function (email, password) {\n  try {\n    if (password.length < 7)\n      throw new Error(\"Password length needs to be 7 chars minimum\");\n\n    const user = {\n      email: `${email}`,\n      password: password,\n    };\n\n    const loggedInUser = await api.post(\"user/login\", user);\n\n    return loggedInUser.data;\n  } catch (error) {\n    throw new Error(error.response.data);\n  }\n};\n\nconst logout = async function () {\n  try {\n    setAuthHeader();\n    await api.post(\"user/logout\");\n\n    return true;\n  } catch (error) {\n    throw new Error(error.response.data);\n  }\n};\n\n/* const getLoggedInUserProfile = async function () {\n  try {\n    setAuthHeader();\n    const user = await api.get(\"user/me\");\n\n    return user.data;\n  } catch (error) {\n    throw new Error(\"Api: getLoggedInUserProfile\", error);\n  }\n}; */\n\nconst getTasks = async function () {\n  try {\n    setAuthHeader();\n    const tasks = await api.get(\"task/\");\n    return tasks.data;\n  } catch (error) {\n    throw new Error(error.response.data);\n  }\n};\n\nconst addTask = async function (description) {\n  try {\n    if (!description) throw new Error(\"Api: addTask - no task given\");\n\n    setAuthHeader();\n\n    const createdTasks = await api.post(\"task/\", {\n      description: `${description}`,\n    });\n    return createdTasks.data;\n  } catch (error) {\n    throw new Error(error.response.data);\n  }\n};\n\nconst updateTask = async function (id, completed, description) {\n  try {\n    if (!id) throw new Error(\"Api: updateTask - no task given\");\n\n    let patch = {};\n    if (completed !== undefined || completed !== null)\n      patch.completed = completed;\n    if (description) patch.description = description;\n\n    setAuthHeader();\n    const updatedTask = await api.put(`task/${id}`, patch);\n\n    return updatedTask.data.data;\n  } catch (error) {\n    throw new Error(error.response.data);\n  }\n};\n\nconst deleteTask = async function (id, completed, description) {\n  try {\n    if (!id) throw new Error(\"Api: deleteTask - no task given\");\n\n    setAuthHeader();\n    const deleted = await api.delete(`task/${id}`);\n\n    return deleted.data;\n  } catch (error) {\n    throw new Error(error.response.data);\n  }\n};\n\nexport { register, login, logout, getTasks, addTask, updateTask, deleteTask };\n","import \"./styles/app.css\";\nimport { Login } from \"./components/Login/Login\";\nimport { AddTaskBar } from \"./components/AddTaskBar/AddTaskBar\";\nimport { Tasklist } from \"./components/Tasklist/Tasklist\";\nimport { Overview } from \"./components/Overview/Overview\";\nimport { FilterBar } from \"./components/FilterBar/FilterBar\";\nimport { Button } from \"./components/Button/Button\";\nimport moonIconPath from \"./images/icon-moon.svg\";\nimport sunIconPath from \"./images/icon-sun.svg\";\nimport { useEffect, useState } from \"react\";\n\nimport * as api from \"./services/api.service\";\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  const [loadingLogin, setLoadgingLogin] = useState(false);\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [loadTasks, setLoadTasks] = useState(false);\n  const [isAddingTask, setIsAddingTask] = useState(false);\n  const [filter, setFilter] = useState(\"all\");\n  const [displayed, setDisplayed] = useState([]);\n  const [ongoingAction, setOngoingAction] = useState(false);\n  const [loginError, setLoginError] = useState(\"\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      api.getTasks().then((res) => {\n        setTasks(res.data);\n        setDisplayed(res.data);\n        setLoadTasks(false);\n      });\n    };\n\n    const token = localStorage.getItem(\"token\");\n\n    if (token && token !== \"\") {\n      setLoggedIn(true);\n      setLoadTasks(true);\n      fetchData();\n    } else {\n      setLoggedIn(false);\n    }\n  }, [loggedIn]);\n\n  function tasksByFilter(tasks, filter) {\n    let newDisplayed;\n    if (filter === \"all\") newDisplayed = tasks.slice();\n\n    if (filter === \"active\") newDisplayed = tasks.filter((t) => !t.completed);\n\n    if (filter === \"completed\") newDisplayed = tasks.filter((t) => t.completed);\n\n    return newDisplayed;\n  }\n\n  return (\n    <div\n      className={`app bg-picture ${\n        darkMode ? \"bg-picture-dark\" : \"bg-picture-light\"\n      } ${darkMode ? \"dark-theme\" : \"\"}`}\n    >\n      <div className=\"content-wrapper\">\n        <header className=\"App-header\">\n          <h1 className=\"text--title\">TODO</h1>\n          <div className=\"header-controls\">\n            <button\n              className=\"theme-btn\"\n              onClick={() => {\n                setDarkMode((mode) => !mode);\n              }}\n            >\n              <img\n                className=\"theme-icon\"\n                src={darkMode ? sunIconPath : moonIconPath}\n                alt={\n                  darkMode\n                    ? \"Sun Icon - Dark Mode is enabled\"\n                    : \"Moon Icon - Light Mode is enabled\"\n                }\n              />\n            </button>\n            <div className=\"btn-logout-wrapper\">\n              <Button\n                label=\"Logout\"\n                onClick={() => {\n                  api.logout();\n                  localStorage.removeItem(\"token\");\n                  setTasks([]);\n                  setDisplayed([]);\n                  setLoggedIn(false);\n                }}\n              />\n            </div>\n          </div>\n        </header>\n\n        <section\n          className={`card addTaskBar ${\n            isAddingTask ? \"loading-add-task\" : \"\"\n          }`}\n        >\n          <AddTaskBar\n            disabled={isAddingTask || loadTasks}\n            onAddTask={(description) => {\n              setIsAddingTask(true);\n\n              api\n                .addTask(description)\n                .then((res) => {\n                  const newTasks = [...tasks, res.data];\n                  setTasks(newTasks);\n\n                  let newDisplayed;\n                  if (filter === \"all\") newDisplayed = newTasks.slice();\n                  if (filter === \"active\")\n                    newDisplayed = newTasks.filter((t) => !t.completed);\n                  if (filter === \"completed\")\n                    newDisplayed = newTasks.filter((t) => t.completed);\n\n                  setDisplayed(newDisplayed);\n\n                  setIsAddingTask(false);\n                })\n                .catch((err) => {\n                  setIsAddingTask(false);\n                  console.log(err);\n                });\n            }}\n          />\n        </section>\n\n        <section className=\"card\">\n          <Tasklist\n            tasks={displayed}\n            disabled={ongoingAction}\n            loading={loadTasks}\n            onCompleteTask={(id, updateCompleteState) => {\n              if (!ongoingAction) {\n                setOngoingAction(true);\n\n                api.updateTask(id, updateCompleteState).then((updatedTask) => {\n                  const newTasks = tasks.slice();\n                  const indexOfUpdatedTask = newTasks.findIndex(\n                    (t) => t._id === id\n                  );\n                  newTasks[indexOfUpdatedTask] = updatedTask;\n                  setTasks(newTasks);\n\n                  setDisplayed(tasksByFilter(newTasks, filter));\n\n                  setOngoingAction(false);\n                });\n              }\n            }}\n            onDeleteTask={(id) => {\n              if (!ongoingAction) {\n                setOngoingAction(true);\n                api.deleteTask(id).then(() => {\n                  const newTasks = tasks.filter((t) => t._id !== id);\n                  setTasks(newTasks);\n\n                  setDisplayed(tasksByFilter(newTasks, filter));\n\n                  setOngoingAction(false);\n                });\n              }\n            }}\n            onSaveTask={(id, description) => {\n              if (!ongoingAction) {\n                setOngoingAction(true);\n\n                const task = tasks.find((t) => t._id === id);\n\n                //TODO: Refactoring API anpassen weil bei description muss complete mitgegeben werden\n                api\n                  .updateTask(id, task.completed, description)\n                  .then((updatedTask) => {\n                    const newTasks = tasks.slice();\n                    const indexOfUpdatedTask = newTasks.findIndex(\n                      (t) => t._id === id\n                    );\n                    newTasks[indexOfUpdatedTask] = updatedTask;\n                    setTasks(newTasks);\n\n                    setDisplayed(tasksByFilter(newTasks, filter));\n\n                    setOngoingAction(false);\n                  });\n              }\n            }}\n          />\n          {loadTasks ? null : (\n            <div className=\"tasks-overview\">\n              <Overview\n                tasksLeft={displayed.length}\n                activeFilter={filter}\n                onSetFilter={(newFilter) => {\n                  setFilter(newFilter);\n\n                  setDisplayed(tasksByFilter(tasks, newFilter));\n                }}\n                onClearCompleted={async () => {\n                  if (!ongoingAction) {\n                    setOngoingAction(true);\n\n                    const unclearedTasks = tasks.filter((t) => !t.completed);\n                    const clearedTasks = tasks.filter((t) => t.completed);\n                    const clearPromises = clearedTasks.map((t) =>\n                      api.deleteTask(t._id)\n                    );\n\n                    Promise.all(clearPromises).then(() => {\n                      setTasks(unclearedTasks);\n                      setDisplayed(tasksByFilter(unclearedTasks, filter));\n                      setOngoingAction(false);\n                    });\n                  }\n                }}\n              />{\" \"}\n            </div>\n          )}\n        </section>\n\n        {loadTasks ? null : (\n          <section className=\"app-filterbar card\">\n            <FilterBar\n              activeFilter={filter}\n              onSetFilter={(newFilter) => {\n                setFilter(newFilter);\n                let newTasks;\n                if (newFilter === \"all\") newTasks = tasks.slice();\n                if (newFilter === \"active\")\n                  newTasks = tasks.filter((t) => !t.completed);\n                if (newFilter === \"completed\")\n                  newTasks = tasks.filter((t) => t.completed);\n\n                setDisplayed(newTasks);\n              }}\n            />\n          </section>\n        )}\n      </div>\n\n      {loggedIn ? null : (\n        <Login\n          loading={loadingLogin}\n          errorMsg={loginError}\n          onRegister={(email, password) => {\n            setLoginError(\"\");\n            setLoadgingLogin(true);\n\n            api\n              .register(email, password)\n              .then((user) => {\n                localStorage.setItem(\"token\", user.token);\n                setLoadgingLogin(false);\n                setLoggedIn(true);\n              })\n              .catch((err) => {\n                setLoadgingLogin(false);\n                setLoginError(err.message);\n                console.log(err);\n              });\n          }}\n          onLogin={(email, password) => {\n            setLoginError(\"\");\n            setLoadgingLogin(true);\n\n            api\n              .login(email, password)\n              .then((user) => {\n                localStorage.setItem(\"token\", user.token);\n                setLoadgingLogin(false);\n                setLoggedIn(true);\n              })\n              .catch((err) => {\n                setLoadgingLogin(false);\n                setLoginError(\"Unable to login.\");\n                console.log(err);\n              });\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./styles/index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <style jsx=\"true\" global=\"true\">{`\n      html {\n        height: 100vh;\n      }\n      body {\n        min-height: 100%;\n        margin: 0px;\n        padding: 0px;\n      }\n    `}</style>\n    <App />\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}